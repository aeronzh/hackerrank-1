process.stdin.resume();
process.stdin.setEncoding('ascii');

var input_stdin = "";
var input_stdin_array = "";
var input_currentline = 0;

process.stdin.on('data', function (data) {
    input_stdin += data;
});

process.stdin.on('end', function () {
    input_stdin_array = input_stdin.split("\n");
    main();    
});

function readLine() {
    return input_stdin_array[input_currentline++];
}

function setCharAt(str,index,chr) {
    if(index > str.length-1) return str;
    return str.substr(0,index) + chr + str.substr(index+1);
}
/////////////// ignore above this line ////////////////////

function main() {
    var n = parseInt(readLine());
    var nodes = {};
    for(var i =0; i<n; i++){
        var array = readLine().split(' ');
        array = array.map(Number);
        if(!nodes[array[0]]){
            nodes[array[0]] = [];            
        }
        
        if(nodes[array[0]].filter(x => x === array[1]).length == 0){
            nodes[array[0]].push(array[1]);
        }
        
        if(!nodes[array[1]]){
            nodes[array[1]] = [];
        }
        
        if(nodes[array[1]].filter(x => x === array[0]).length == 0){
            nodes[array[1]].push(array[0]);
        }
       
    }
    
    //console.log(nodes);
    var result = getResult(nodes);
    
    var max = 1, min = n*2;
    for(var res of result){
        if(res > max){
            max = res;
        }
        
        if(res < min){
            min = res;
        }      
    }
    
    console.log(`${min} ${max}`);
}

function getResult(nodes){
    var result = [];
    var openedNodes = {};
    for(var node in nodes){        
        processOneNode(node, nodes, result, openedNodes);
    }
    
    return result
}

function processOneNode(node, nodes, result, openedNodes){
    if(openedNodes[node]){
        return;
    }
    
    let nodesStack = [];
    let stackPosition = 0;
    nodesStack.push(node);
    //console.log(`stack1: ${nodesStack} node: ${node}`);
    openedNodes[node] = true;
    while(stackPosition < nodesStack.length){
        var nonOpened = nodes[nodesStack[stackPosition]].filter( x => !openedNodes[x]);
        //console.log(`non opened: ${nonOpened}`);
        nodesStack.push(...nonOpened);
        stackPosition++;
        for(var non of nonOpened){
            openedNodes[non] = true;
        }
        //console.log(`stack position: ${stackPosition}, length: ${nodesStack.length}`);
    }
    
    for(var item of nodesStack){
        openedNodes[item] = true;
    }
    
    //console.log(`stack: ${nodesStack}`);
    result.push(stackPosition);
}

